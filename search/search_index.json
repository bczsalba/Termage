{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Termage is a wrapper library for PyTermGUI 's SVG export functionalities. Other than providing the module, it also offers a CLI and an MkDocs plugin to put SVGs just about anywhere you can think of. Termage has native support for capturing applications based on PyTermGUI 's WindowManager ! Python Output from pytermgui import tim , ColorPicker from pytermgui.pretty import print tim . print ( \"Welcome to [!gradient(112) bold]Termage[/]! \\n \" ) tim . print ( \"Termage allows you to display [italic]any[/italic] terminal output in a terminal-mimicking [bold]SVG[/bold]!\" ) tim . print ( \" \\n Here are the current locals:\" ) print ( locals ()) text.termage-0 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-0-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Hey there! Welcome to T e r m a ge ! Termage allows you to display any terminal output in a terminal-mimicking SVG ! Here are the current locals: { '__name__' : '__main__' , '__doc__' : None , '__package__' : None , '__annotations__' : {} , '__builtins__' : < module 'builtins' (built-in)>, 'termage' : <termage.execution. TermageNamespace object at 0x102b03910 >, 'tim' : <pytermgui.markup.language. MarkupLanguage object at 0x102c612e0 >, 'ColorPicker' : < class 'pytermgui.widgets.color_picker.ColorPicker' >, 'print' : < function pprint at 0x102df1dc0 > } Installation Termage is best installed using pip : $ pip install termage This will install PyTermGUI, as well as Termage. The MkDocs plugin is included within the installation as well. Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) text.termage-1 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-1-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } My SVG \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"Introduction"},{"location":"#installation","text":"Termage is best installed using pip : $ pip install termage This will install PyTermGUI, as well as Termage. The MkDocs plugin is included within the installation as well. Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) text.termage-1 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-1-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } My SVG \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"Installation"},{"location":"cli/","text":"The Termage CLI offers a quick and customizable way to export SVGs from your terminal. Usage You simply call termage with some code, and provide options to customize the output. By default, the output file will be printed to STDOUT, but you can export directly to a file using the -o flag. Termage also accepts having code piped to it; this sets the code argument to - , which will cause it to read from STDIN. Showcase source.py import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) Syntax highlighting Code output Code highlighting termage source.py --title=\"Welcome to the Termage CLI!\" text.termage-2 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-2-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Welcome to to Termage CLI! \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`. termage source.py --title=\"Welcome to the Termage CLI!\" --highlight text.termage-3 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-3-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Welcome to to Termage CLI! \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"In the command line"},{"location":"cli/#usage","text":"You simply call termage with some code, and provide options to customize the output. By default, the output file will be printed to STDOUT, but you can export directly to a file using the -o flag. Termage also accepts having code piped to it; this sets the code argument to - , which will cause it to read from STDIN.","title":"Usage"},{"location":"cli/#showcase","text":"source.py import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), )","title":"Showcase"},{"location":"cli/#syntax-highlighting","text":"Code output Code highlighting termage source.py --title=\"Welcome to the Termage CLI!\" text.termage-2 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-2-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Welcome to to Termage CLI! \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`. termage source.py --title=\"Welcome to the Termage CLI!\" --highlight text.termage-3 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-3-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Welcome to to Termage CLI! \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"Syntax highlighting"},{"location":"options/","text":"MkDocs plugin config options Other than the ones listed below, the MkDocs plugin exposes a couple of configuration options. write_files Write files during generation, instead of inserting their contents directly into the HTML. This setting, when used during mkdocs serve , can and likely will cause infinite reload-loops at the first file change. This is due to assets/ (the default path) being watched by MkDocs' livereload implementation, so every time the docs regenerate, we generate SVGs which then triggers another reload. The only way I've found around this issue was by allowing inline SVG insertions, though it shoulnd't be a problem if you don't use serve or run it with --no-livereload . Default : False inline_style Controls the PyTermGUI SVG export option of the same name. When set, element styles will be applied as style= attributes, instead of as classes defined earlier in the export. Default : True path Sets the path that output files will be written to. This path must be relative to docs/ , NOT to the root of the repository. Requires : write_files == True Default : assets/ name_template Controls the template string used to generate filenames. Templated variables available are: count : The generation-index of the given SVG title : The title passed as an option of the SVG. Warning Since title may be empty, you should always include count in your template to avoid filename overlaps (and lost files). Requires : write_files == True Default : termage_{count}.svg General (Python & MkDocs) options Regardless of your entrypoint, the options available are going to be the same. Include Includes a file within a codeblock. The file path must originate from the same directory as mkdocs.yml . For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ``` Hide lines The plugin has a special bit of syntax to signify Run this line of code, but don't display it . It is denoted by prefacing any hidden line with an ampersand (&): Source ```termage title=Hidden\\ lines &from pytermgui.pretty import print print(locals()) ``` Python Output print ( locals ()) text.termage-4 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-4-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Hidden lines { '__name__' : '__main__' , '__doc__' : None , '__package__' : None , '__annotations__' : {} , '__builtins__' : < module 'builtins' (built-in)>, 'termage' : <termage.execution. TermageNamespace object at 0x102b03910 >, 'print' : < function pprint at 0x102df1dc0 > } Width and Height Sets the terminal's dimension of the given axis. Must be given an integer, which will be taken as a character-count. width=50 height=10 width=100 height=20 text.termage-5 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-5-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window text.termage-6 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-6-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window Info If no dimensions are provided, they default to (80, 24). Foreground & Background Modifies the terminal's default colors. foreground is used for all non-styled text, and background is used as both the background to the terminal's contents as well as the window that it emulates. Default foreground=green background=#DDDDDD text.termage-7 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-7-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } None Hello text.termage-8 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-8-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } None Hello Info Foreground defaults to #DDDDDD , and background defaults to #212121 . Tabs Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) text.termage-9 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-9-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) text.termage-10 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-10-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window Title Sets the title at the top of the output terminal. Warning When using the plugin, make sure to escape any spaces present in your title! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title text.termage-11 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-11-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window text.termage-12 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-12-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } My fancy title Some window","title":"Options"},{"location":"options/#mkdocs-plugin-config-options","text":"Other than the ones listed below, the MkDocs plugin exposes a couple of configuration options.","title":"MkDocs plugin config options"},{"location":"options/#write_files","text":"Write files during generation, instead of inserting their contents directly into the HTML. This setting, when used during mkdocs serve , can and likely will cause infinite reload-loops at the first file change. This is due to assets/ (the default path) being watched by MkDocs' livereload implementation, so every time the docs regenerate, we generate SVGs which then triggers another reload. The only way I've found around this issue was by allowing inline SVG insertions, though it shoulnd't be a problem if you don't use serve or run it with --no-livereload . Default : False","title":"write_files"},{"location":"options/#inline_style","text":"Controls the PyTermGUI SVG export option of the same name. When set, element styles will be applied as style= attributes, instead of as classes defined earlier in the export. Default : True","title":"inline_style"},{"location":"options/#path","text":"Sets the path that output files will be written to. This path must be relative to docs/ , NOT to the root of the repository. Requires : write_files == True Default : assets/","title":"path"},{"location":"options/#name_template","text":"Controls the template string used to generate filenames. Templated variables available are: count : The generation-index of the given SVG title : The title passed as an option of the SVG. Warning Since title may be empty, you should always include count in your template to avoid filename overlaps (and lost files). Requires : write_files == True Default : termage_{count}.svg","title":"name_template"},{"location":"options/#general-python-mkdocs-options","text":"Regardless of your entrypoint, the options available are going to be the same.","title":"General (Python &amp; MkDocs) options"},{"location":"options/#include","text":"Includes a file within a codeblock. The file path must originate from the same directory as mkdocs.yml . For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ```","title":"Include"},{"location":"options/#hide-lines","text":"The plugin has a special bit of syntax to signify Run this line of code, but don't display it . It is denoted by prefacing any hidden line with an ampersand (&): Source ```termage title=Hidden\\ lines &from pytermgui.pretty import print print(locals()) ``` Python Output print ( locals ()) text.termage-4 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-4-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Hidden lines { '__name__' : '__main__' , '__doc__' : None , '__package__' : None , '__annotations__' : {} , '__builtins__' : < module 'builtins' (built-in)>, 'termage' : <termage.execution. TermageNamespace object at 0x102b03910 >, 'print' : < function pprint at 0x102df1dc0 > }","title":"Hide lines"},{"location":"options/#width-and-height","text":"Sets the terminal's dimension of the given axis. Must be given an integer, which will be taken as a character-count. width=50 height=10 width=100 height=20 text.termage-5 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-5-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window text.termage-6 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-6-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window Info If no dimensions are provided, they default to (80, 24).","title":"Width and Height"},{"location":"options/#foreground-background","text":"Modifies the terminal's default colors. foreground is used for all non-styled text, and background is used as both the background to the terminal's contents as well as the window that it emulates. Default foreground=green background=#DDDDDD text.termage-7 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-7-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } None Hello text.termage-8 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-8-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } None Hello Info Foreground defaults to #DDDDDD , and background defaults to #212121 .","title":"Foreground &amp; Background"},{"location":"options/#tabs","text":"Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) text.termage-9 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-9-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) text.termage-10 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-10-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window","title":"Tabs"},{"location":"options/#title","text":"Sets the title at the top of the output terminal. Warning When using the plugin, make sure to escape any spaces present in your title! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title text.termage-11 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-11-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } docs/src/dimension_demo.py Some window text.termage-12 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-12-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } My fancy title Some window","title":"Title"},{"location":"plugin/","text":"The termage MkDocs plugin lets you generate your documentation's SVGs every time you build it. This has some advantages: Your screenshots will always remain up to date I know from personal experience how draining it can be to go through all images in your documentaition, see if they need to be replaced, re-create the original screenshot with the right settings & size and upload it to your site. Termage simplifies this by basically doing all of that for you, every time your docs need to be updated. You are always going to test some parts of your function. Some errors, even in well-traversed codepaths may be very hard to catch. By putting your raw output straight into your documentation, you ensure that as many people see it as possible. This hugely increases the chance of finding issues that no one would have reported for weeks. You have a good opportunity to write some visual example code! The easiest way to work with the plugin is to keep a set of source code files, and use the include option to display them on the page. By doing so, you offer some really good \"getting started\" material to newcomers to your project, and ensure that it is fully functional! Set up In order to use the plugin, you need to enable the following built-in markdown extensions: mkdocs.yaml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Additionally, you must also activate the plugin: mkdocs.yaml plugins : - termage : # Default config options name_template : \"termage_{count}.svg\" path : \"assets\" name_template : \"termage_{count}.svg\" background : \"#212121\" foreground : \"#dddddd\" tabs : [ \"Python\" , \"Output\" ] chrome : True width : 0 height : 4 Warning Make sure to put this plugin in front of any other markdown pre-processors. This helps cut down on unintended, and hard to debug behaviour. Usage The plugin will look for the syntax: ```termage(-svg) option=value option=value... {code} ``` All possible options can be found on their page . There are 2 directives possible: termage <options> : Generates a tabbed layout, with one tab for the Python source, and the other for the SVG output. Example ```termage title=Tabbed\\ layout include=docs/src/source.py ``` Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) text.termage-13 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-13-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Tabbed layout \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`. termage-svg <options> : Generates only the output SVG, without the tabbed layout. Example ```termage-svg title=Tabbed\\ layout include=docs/src/source.py ``` text.termage-14 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-14-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Tabbed layout \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"As an MkDocs plugin"},{"location":"plugin/#set-up","text":"In order to use the plugin, you need to enable the following built-in markdown extensions: mkdocs.yaml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Additionally, you must also activate the plugin: mkdocs.yaml plugins : - termage : # Default config options name_template : \"termage_{count}.svg\" path : \"assets\" name_template : \"termage_{count}.svg\" background : \"#212121\" foreground : \"#dddddd\" tabs : [ \"Python\" , \"Output\" ] chrome : True width : 0 height : 4 Warning Make sure to put this plugin in front of any other markdown pre-processors. This helps cut down on unintended, and hard to debug behaviour.","title":"Set up"},{"location":"plugin/#usage","text":"The plugin will look for the syntax: ```termage(-svg) option=value option=value... {code} ``` All possible options can be found on their page . There are 2 directives possible: termage <options> : Generates a tabbed layout, with one tab for the Python source, and the other for the SVG output. Example ```termage title=Tabbed\\ layout include=docs/src/source.py ``` Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) text.termage-13 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-13-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Tabbed layout \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`. termage-svg <options> : Generates only the output SVG, without the tabbed layout. Example ```termage-svg title=Tabbed\\ layout include=docs/src/source.py ``` text.termage-14 { font-size: 15px; font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace; font-feature-settings: normal; /* Inline SVGs are `antialiased` by default, while `src=`-d ones are `auto`.*/ -webkit-font-smoothing: auto; } .termage-14-title { font-family: 'arial'; fill: #94999A; font-size: 13px; font-weight: bold; } Tabbed layout \u250c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510 \u2502 pytermgui.inspector.inspect \u2502 \u2502 Located in /Users/lapis/Code/Projects/pytermgui/pytermgui/inspector.py \u2502 \u2514 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2518 def inspect (target: object , **inspector_args: Any ) -> Inspector : Inspects an object. Args: target: The object to inspect. **inspector_args: See `Inspector.__init__`.","title":"Usage"},{"location":"reference/SUMMARY/","text":"termage execution mkdocs_plugin","title":"SUMMARY"},{"location":"reference/termage/","text":"Generate SVGs from any Python code, even in your documentation.","title":"Index"},{"location":"reference/termage/execution/","text":"All the code used to record code execution. TermageNamespace A simple namespace for exec globals, exposed as termage . You can use all below methods by referencing the termage object in termage-run code, which you don't have to import. You usually want to hide these lines, as they are generally for styling purposes. Source code in termage/execution.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class TermageNamespace : \"\"\"A simple namespace for exec globals, exposed as `termage`. You can use all below methods by referencing the `termage` object in termage-run code, which you don't have to import. You _usually_ want to hide these lines, as they are generally for styling purposes. \"\"\" @property def terminal ( self ) -> ptg . Terminal : \"\"\"Returns the current terminal object.\"\"\" return ptg . get_terminal () def fit ( self , widget : ptg . Widget ) -> None : \"\"\"Fits the output terminal around the given widget.\"\"\" self . terminal . size = widget . width , widget . height def resize ( self , width : int , height : int ) -> None : \"\"\"Resizes the output terminal to the given dimensions.\"\"\" self . terminal . size = width , height fit ( widget ) Fits the output terminal around the given widget. Source code in termage/execution.py 65 66 67 68 def fit ( self , widget : ptg . Widget ) -> None : \"\"\"Fits the output terminal around the given widget.\"\"\" self . terminal . size = widget . width , widget . height resize ( width , height ) Resizes the output terminal to the given dimensions. Source code in termage/execution.py 70 71 72 73 def resize ( self , width : int , height : int ) -> None : \"\"\"Resizes the output terminal to the given dimensions.\"\"\" self . terminal . size = width , height terminal () property Returns the current terminal object. Source code in termage/execution.py 59 60 61 62 63 @property def terminal ( self ) -> ptg . Terminal : \"\"\"Returns the current terminal object.\"\"\" return ptg . get_terminal () execute ( code = None , file = None , highlight = False , * , exec_globals = EXEC_GLOBALS ) Executes the given code under a custom context. Parameters: Name Type Description Default code str | None The Python code to execute. None file Path | None A file that will be opened, and its contents will be added to the executed code before the code argument. None highlight bool If set, the combined code will only be highlighted using PyTermGUI's highlight_python function, with that result being written to the SVG. Great for quick code screenshots! False exec_globals dict [ str , Any ] The dictionary that will be passed to exec , which makes it the global namespace of the context. EXEC_GLOBALS Source code in termage/execution.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def execute ( code : str | None = None , file : Path | None = None , highlight : bool = False , * , exec_globals : dict [ str , Any ] = EXEC_GLOBALS , ) -> None : \"\"\"Executes the given code under a custom context. Args: code: The Python code to execute. file: A file that will be opened, and its contents will be added to the executed code *before* the `code` argument. highlight: If set, the combined code will only be highlighted using PyTermGUI's `highlight_python` function, with that result being written to the SVG. Great for quick code screenshots! exec_globals: The dictionary that will be passed to `exec`, which makes it the global namespace of the context. \"\"\" ptg . WindowManager . autorun = False exec_globals = exec_globals . copy () old_argv = sys . argv sys . argv = [ \"<string>\" ] code = code or \"\" # if module is not None: # mod_name, *args = module.split() # sys.argv = [*args] # out = runpy.run_module(mod_name, init_globals={\"sys\": sys}) # print(out) if file is not None : with open ( file , \"r\" , encoding = \"utf-8\" ) as source : code = source . read () + code if highlight : print ( ptg . tim . parse ( ptg . highlight_python ( code ))) return exec_globals exec ( code , exec_globals ) sys . argv = old_argv if \"manager\" in exec_globals : exec_globals [ \"manager\" ] . compositor . draw () return exec_globals format_codeblock ( block ) Formats a codeblock into display and executed lines. Source code in termage/execution.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def format_codeblock ( block : str ) -> tuple [ str , str ]: \"\"\"Formats a codeblock into display and executed lines.\"\"\" disp_lines , exec_lines = [], [] lines = block . splitlines () indent = \" \" * ( len ( lines [ 0 ]) - len ( lines [ 0 ] . lstrip ())) for line in lines : line = line . replace ( indent , \"\" , 1 ) if line . startswith ( \"&\" ): exec_lines . append ( line [ 1 :]) continue exec_lines . append ( line ) disp_lines . append ( line ) return \" \\n \" . join ( disp_lines ), \" \\n \" . join ( exec_lines ) patched_stdout_recorder ( width , height ) Records everything written to stdout, even built is print. It does so by monkeypathing sys.stdout.write to a custom function, which first writes to a custom Terminal . Parameters: Name Type Description Default width int | None The width of the terminal used for the recording. required height int | None The height of the terminal used for the recording. required Returns: Type Description Generator [ ptg . Recorder , None, None] The recorder object, with all the data written to it. Source code in termage/execution.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 @contextmanager def patched_stdout_recorder ( width : int | None , height : int | None ) -> Generator [ ptg . Recorder , None , None ]: \"\"\"Records everything written to stdout, even built is print. It does so by monkeypathing `sys.stdout.write` to a custom function, which first writes to a custom `Terminal`. Args: width: The width of the terminal used for the recording. height: The height of the terminal used for the recording. Returns: The recorder object, with all the data written to it. \"\"\" if width is None : width = DEFAULT_WIDTH if height is None : height = DEFAULT_HEIGHT stdout_write = sys . stdout . write stream = StringIO () terminal = ptg . Terminal ( stream = stream , size = ( width , height )) ptg . set_global_terminal ( terminal ) def _write ( item , ** kwargs ) -> None : \"\"\"Writes something, breaks lines.\"\"\" ends_with_linebreak = item . endswith ( \" \\n \" ) lines = list ( ptg . break_line ( item , terminal . width )) for i , line in enumerate ( lines ): if ends_with_linebreak or i < len ( lines ) - 1 : line += \" \\n \" terminal . write ( line , ** kwargs ) with terminal . record () as recorder : try : sys . stdout . write = _write yield recorder finally : sys . stdout . write = stdout_write # type: ignore set_colors ( foreground , background ) Sets the colors that will be used by the terminal. Source code in termage/execution.py 189 190 191 192 193 194 195 196 def set_colors ( foreground : str | None , background : str | None ) -> None : \"\"\"Sets the colors that will be used by the terminal.\"\"\" if foreground is not None : ptg . Color . default_foreground = ptg . str_to_color ( foreground ) if background is not None : ptg . Color . default_background = ptg . str_to_color ( background ) termage ( code = '' , include = None , width = None , height = None , title = '' , chrome = True , foreground = None , background = None , highlight_only = False , save_as = None ) A generalized wrapper for Termage functionality. Parameters: Name Type Description Default code str The code that will be run to generate the file. '' include str | Path | None A path to a Python file that will be included before code . None width int | None The output terminal's width. None height int | None The output terminal's height. None title str The output terminal's window title. Has no effect when chrome is False . '' chrome bool Shows or hides the window decorations. True foreground str | None Sets the default foreground (text) style of the output. Only applies to unstyled text. None background str | None Sets the output terminal's background color. None highlight_only bool If set, the given code is not run, rather given to the ptg.highlight_python function. False save_as str | Path | None If set, the export will be written to this filepath. The export will be returned regardless of this setting. None Returns: Type Description str The exported SVG file. Source code in termage/execution.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def termage ( # pylint: disable=too-many-arguments code : str = \"\" , include : str | Path | None = None , width : int | None = None , height : int | None = None , title : str = \"\" , chrome : bool = True , foreground : str | None = None , background : str | None = None , highlight_only : bool = False , save_as : str | Path | None = None , ) -> str : \"\"\"A generalized wrapper for Termage functionality. Args: code: The code that will be run to generate the file. include: A path to a Python file that will be included before `code`. width: The output terminal's width. height: The output terminal's height. title: The output terminal's window title. Has no effect when `chrome` is `False`. chrome: Shows or hides the window decorations. foreground: Sets the default foreground (text) style of the output. Only applies to unstyled text. background: Sets the output terminal's background color. highlight_only: If set, the given code is not run, rather given to the `ptg.highlight_python` function. save_as: If set, the export will be written to this filepath. The export will be returned regardless of this setting. Returns: The exported SVG file. \"\"\" set_colors ( foreground , background ) if include is not None : with open ( include , \"r\" , encoding = \"utf-8\" ) as includefile : code = includefile . read () + code with patched_stdout_recorder ( width , height ) as recording : execute ( code = code , highlight = highlight_only ) export = recording . export_svg ( title = title , chrome = chrome ) if save_as is not None : with open ( save_as , \"w\" , encoding = \"utf-8\" ) as save : save . write ( export ) return export","title":"execution"},{"location":"reference/termage/execution/#termage.execution.TermageNamespace","text":"A simple namespace for exec globals, exposed as termage . You can use all below methods by referencing the termage object in termage-run code, which you don't have to import. You usually want to hide these lines, as they are generally for styling purposes. Source code in termage/execution.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class TermageNamespace : \"\"\"A simple namespace for exec globals, exposed as `termage`. You can use all below methods by referencing the `termage` object in termage-run code, which you don't have to import. You _usually_ want to hide these lines, as they are generally for styling purposes. \"\"\" @property def terminal ( self ) -> ptg . Terminal : \"\"\"Returns the current terminal object.\"\"\" return ptg . get_terminal () def fit ( self , widget : ptg . Widget ) -> None : \"\"\"Fits the output terminal around the given widget.\"\"\" self . terminal . size = widget . width , widget . height def resize ( self , width : int , height : int ) -> None : \"\"\"Resizes the output terminal to the given dimensions.\"\"\" self . terminal . size = width , height","title":"TermageNamespace"},{"location":"reference/termage/execution/#termage.execution.TermageNamespace.fit","text":"Fits the output terminal around the given widget. Source code in termage/execution.py 65 66 67 68 def fit ( self , widget : ptg . Widget ) -> None : \"\"\"Fits the output terminal around the given widget.\"\"\" self . terminal . size = widget . width , widget . height","title":"fit()"},{"location":"reference/termage/execution/#termage.execution.TermageNamespace.resize","text":"Resizes the output terminal to the given dimensions. Source code in termage/execution.py 70 71 72 73 def resize ( self , width : int , height : int ) -> None : \"\"\"Resizes the output terminal to the given dimensions.\"\"\" self . terminal . size = width , height","title":"resize()"},{"location":"reference/termage/execution/#termage.execution.TermageNamespace.terminal","text":"Returns the current terminal object. Source code in termage/execution.py 59 60 61 62 63 @property def terminal ( self ) -> ptg . Terminal : \"\"\"Returns the current terminal object.\"\"\" return ptg . get_terminal ()","title":"terminal()"},{"location":"reference/termage/execution/#termage.execution.execute","text":"Executes the given code under a custom context. Parameters: Name Type Description Default code str | None The Python code to execute. None file Path | None A file that will be opened, and its contents will be added to the executed code before the code argument. None highlight bool If set, the combined code will only be highlighted using PyTermGUI's highlight_python function, with that result being written to the SVG. Great for quick code screenshots! False exec_globals dict [ str , Any ] The dictionary that will be passed to exec , which makes it the global namespace of the context. EXEC_GLOBALS Source code in termage/execution.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def execute ( code : str | None = None , file : Path | None = None , highlight : bool = False , * , exec_globals : dict [ str , Any ] = EXEC_GLOBALS , ) -> None : \"\"\"Executes the given code under a custom context. Args: code: The Python code to execute. file: A file that will be opened, and its contents will be added to the executed code *before* the `code` argument. highlight: If set, the combined code will only be highlighted using PyTermGUI's `highlight_python` function, with that result being written to the SVG. Great for quick code screenshots! exec_globals: The dictionary that will be passed to `exec`, which makes it the global namespace of the context. \"\"\" ptg . WindowManager . autorun = False exec_globals = exec_globals . copy () old_argv = sys . argv sys . argv = [ \"<string>\" ] code = code or \"\" # if module is not None: # mod_name, *args = module.split() # sys.argv = [*args] # out = runpy.run_module(mod_name, init_globals={\"sys\": sys}) # print(out) if file is not None : with open ( file , \"r\" , encoding = \"utf-8\" ) as source : code = source . read () + code if highlight : print ( ptg . tim . parse ( ptg . highlight_python ( code ))) return exec_globals exec ( code , exec_globals ) sys . argv = old_argv if \"manager\" in exec_globals : exec_globals [ \"manager\" ] . compositor . draw () return exec_globals","title":"execute()"},{"location":"reference/termage/execution/#termage.execution.format_codeblock","text":"Formats a codeblock into display and executed lines. Source code in termage/execution.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def format_codeblock ( block : str ) -> tuple [ str , str ]: \"\"\"Formats a codeblock into display and executed lines.\"\"\" disp_lines , exec_lines = [], [] lines = block . splitlines () indent = \" \" * ( len ( lines [ 0 ]) - len ( lines [ 0 ] . lstrip ())) for line in lines : line = line . replace ( indent , \"\" , 1 ) if line . startswith ( \"&\" ): exec_lines . append ( line [ 1 :]) continue exec_lines . append ( line ) disp_lines . append ( line ) return \" \\n \" . join ( disp_lines ), \" \\n \" . join ( exec_lines )","title":"format_codeblock()"},{"location":"reference/termage/execution/#termage.execution.patched_stdout_recorder","text":"Records everything written to stdout, even built is print. It does so by monkeypathing sys.stdout.write to a custom function, which first writes to a custom Terminal . Parameters: Name Type Description Default width int | None The width of the terminal used for the recording. required height int | None The height of the terminal used for the recording. required Returns: Type Description Generator [ ptg . Recorder , None, None] The recorder object, with all the data written to it. Source code in termage/execution.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 @contextmanager def patched_stdout_recorder ( width : int | None , height : int | None ) -> Generator [ ptg . Recorder , None , None ]: \"\"\"Records everything written to stdout, even built is print. It does so by monkeypathing `sys.stdout.write` to a custom function, which first writes to a custom `Terminal`. Args: width: The width of the terminal used for the recording. height: The height of the terminal used for the recording. Returns: The recorder object, with all the data written to it. \"\"\" if width is None : width = DEFAULT_WIDTH if height is None : height = DEFAULT_HEIGHT stdout_write = sys . stdout . write stream = StringIO () terminal = ptg . Terminal ( stream = stream , size = ( width , height )) ptg . set_global_terminal ( terminal ) def _write ( item , ** kwargs ) -> None : \"\"\"Writes something, breaks lines.\"\"\" ends_with_linebreak = item . endswith ( \" \\n \" ) lines = list ( ptg . break_line ( item , terminal . width )) for i , line in enumerate ( lines ): if ends_with_linebreak or i < len ( lines ) - 1 : line += \" \\n \" terminal . write ( line , ** kwargs ) with terminal . record () as recorder : try : sys . stdout . write = _write yield recorder finally : sys . stdout . write = stdout_write # type: ignore","title":"patched_stdout_recorder()"},{"location":"reference/termage/execution/#termage.execution.set_colors","text":"Sets the colors that will be used by the terminal. Source code in termage/execution.py 189 190 191 192 193 194 195 196 def set_colors ( foreground : str | None , background : str | None ) -> None : \"\"\"Sets the colors that will be used by the terminal.\"\"\" if foreground is not None : ptg . Color . default_foreground = ptg . str_to_color ( foreground ) if background is not None : ptg . Color . default_background = ptg . str_to_color ( background )","title":"set_colors()"},{"location":"reference/termage/execution/#termage.execution.termage","text":"A generalized wrapper for Termage functionality. Parameters: Name Type Description Default code str The code that will be run to generate the file. '' include str | Path | None A path to a Python file that will be included before code . None width int | None The output terminal's width. None height int | None The output terminal's height. None title str The output terminal's window title. Has no effect when chrome is False . '' chrome bool Shows or hides the window decorations. True foreground str | None Sets the default foreground (text) style of the output. Only applies to unstyled text. None background str | None Sets the output terminal's background color. None highlight_only bool If set, the given code is not run, rather given to the ptg.highlight_python function. False save_as str | Path | None If set, the export will be written to this filepath. The export will be returned regardless of this setting. None Returns: Type Description str The exported SVG file. Source code in termage/execution.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def termage ( # pylint: disable=too-many-arguments code : str = \"\" , include : str | Path | None = None , width : int | None = None , height : int | None = None , title : str = \"\" , chrome : bool = True , foreground : str | None = None , background : str | None = None , highlight_only : bool = False , save_as : str | Path | None = None , ) -> str : \"\"\"A generalized wrapper for Termage functionality. Args: code: The code that will be run to generate the file. include: A path to a Python file that will be included before `code`. width: The output terminal's width. height: The output terminal's height. title: The output terminal's window title. Has no effect when `chrome` is `False`. chrome: Shows or hides the window decorations. foreground: Sets the default foreground (text) style of the output. Only applies to unstyled text. background: Sets the output terminal's background color. highlight_only: If set, the given code is not run, rather given to the `ptg.highlight_python` function. save_as: If set, the export will be written to this filepath. The export will be returned regardless of this setting. Returns: The exported SVG file. \"\"\" set_colors ( foreground , background ) if include is not None : with open ( include , \"r\" , encoding = \"utf-8\" ) as includefile : code = includefile . read () + code with patched_stdout_recorder ( width , height ) as recording : execute ( code = code , highlight = highlight_only ) export = recording . export_svg ( title = title , chrome = chrome ) if save_as is not None : with open ( save_as , \"w\" , encoding = \"utf-8\" ) as save : save . write ( export ) return export","title":"termage()"},{"location":"reference/termage/mkdocs_plugin/","text":"A plugin for MkDocs that allows generating & inserting SVGs using Termage. TermageOptions dataclass Options passed into the Termage plugin. Source code in termage/mkdocs_plugin.py 48 49 50 51 52 53 54 55 56 57 58 59 60 @dataclass class TermageOptions : # pylint: disable=too-many-instance-attributes \"\"\"Options passed into the Termage plugin.\"\"\" title : str width : int height : int include : str foreground : str background : str chrome : bool tabs : tuple [ str , str ] highlight : bool TermagePlugin Bases: BasePlugin An mkdocs plugin for Termage. Source code in termage/mkdocs_plugin.pyclass TermagePlugin ( BasePlugin ): \"\"\"An mkdocs plugin for Termage.\"\"\" config_scheme = ( # File configuration ( \"write_files\" , Type ( bool , default = False )), ( \"inline_styles\" , Type ( bool , default = True )), ( \"path\" , Type ( str , default = \"assets\" )), ( \"name_template\" , Type ( str , default = \"termage_ {count} .svg\" )), # SVG content configuration ( \"background\" , Type ( str , default = \"#212121\" )), ( \"foreground\" , Type ( str , default = \"#dddddd\" )), ( \"tabs\" , Type ( list , default = [ \"Python\" , \"Output\" ])), ( \"chrome\" , Type ( bool , default = True )), ( \"width\" , Type ( int , default = 80 )), ( \"height\" , Type ( int , default = 24 )), ) def __init__ ( self ) -> None : \"\"\"Sets the initial SVG count.\"\"\" self . _svg_count = 0 def _get_next_path ( self , title : str | None ) -> str : \"\"\"Gets the next SVG path.\"\"\" base = self . config [ \"path\" ] name_template = self . config [ \"name_template\" ] name = name_template . format ( count = self . _svg_count , title = str ( title ), ) return f \" { base } / { name } \" def parse_options ( self , options : str ) -> TermageOptions : \"\"\"Parses the options given to a block.\"\"\" opt_dict = { key : self . config . get ( key , None ) for key in OPTS } extra_opts = \"\" for option in re . split ( r \"(?<! \\\\ ) \" , options ): if len ( option ) == 0 : continue try : key , value = option . split ( \"=\" ) except ValueError : extra_opts += \" \" + option continue value = value . replace ( \" \\\\ \" , \"\" ) if key not in opt_dict : extra_opts += \" \" + option continue original = opt_dict [ key ] if isinstance ( original , bool ): value = value . lower () in ( \"1\" , \"true\" , \"yes\" ) elif isinstance ( original , int ): value = int ( value ) elif isinstance ( opt_dict [ key ], list ): value = value . split ( \",\" ) opt_dict [ key ] = value return TermageOptions ( ** opt_dict ), extra_opts # type: ignore def replace ( self , matchobj : Match ) -> str : # pylint: disable=too-many-locals \"\"\"Replaces a code block match with a generated SVG.\"\"\" full , indentation , svg_only , options , code = matchobj . groups () indent_len = len ( indentation ) if indentation . endswith ( \" \\\\ \" ): return full . replace ( r \"\\`\" , \"`\" , 1 ) opts , extra_opts = self . parse_options ( options ) set_colors ( opts . foreground , opts . background ) if opts . include is not None : with open ( opts . include , \"r\" , encoding = \"utf-8\" ) as includefile : included = \"\" for line in includefile : if line . startswith ( \"&\" ): included += \"&\" + indentation + line [ 1 :] continue included += indentation + line code = included + code opts . title = opts . title or opts . include code_disp , code_exec = format_codeblock ( code ) with patched_stdout_recorder ( opts . width , opts . height ) as recording : execute ( code = code_exec ) svg = ( recording . export_svg ( title = opts . title , chrome = opts . chrome , prefix = f \"termage- { self . _svg_count } \" , inline_styles = self . config [ \"inline_styles\" ], ) . replace ( \"_\" , r \"\\_\" ) . replace ( \"`\" , r \"\\`\" ) . replace ( \"*\" , r \"\\*\" ) ) self . _svg_count += 1 style = \"margin-top: -1em;\" if not opts . chrome else \"\" if self . config [ \"write_files\" ]: filepath = self . _get_next_path ( opts . title ) with open ( Path ( \"docs\" ) / filepath , \"w\" , encoding = \"utf-8\" ) as export : export . write ( svg ) img_tag = ( f \"<img alt=' { opts . title } ' src='/ { filepath } ' style=' { style } '></img>\" ) if svg_only : return img_tag return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = img_tag , ), amount = indent_len , ) if style != \"\" : svg = svg [: len ( \"<svg \" )] + f \"style=' { style } ' \" + svg [ len ( \"<svg \" ) :] if svg_only : return indent ( svg , indent_len ) return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = svg , ), amount = indent_len , ) def on_page_markdown ( # pylint: disable=unused-argument self , markdown , page , files , config ) -> str : \"\"\"Replaces the termage markdown syntax.\"\"\" return RE_BLOCK . sub ( self . replace , markdown ) __init__ () Source code in termage/mkdocs_plugin.py 81 82 83 84 def __init__ ( self ) -> None : \"\"\"Sets the initial SVG count.\"\"\" self . _svg_count = 0 on_page_markdown ( markdown , page , files , config ) Replaces the termage markdown syntax. Source code in termage/mkdocs_plugin.py 222 223 224 225 226 227 def on_page_markdown ( # pylint: disable=unused-argument self , markdown , page , files , config ) -> str : \"\"\"Replaces the termage markdown syntax.\"\"\" return RE_BLOCK . sub ( self . replace , markdown ) parse_options ( options ) Parses the options given to a block. Source code in termage/mkdocs_plugin.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def parse_options ( self , options : str ) -> TermageOptions : \"\"\"Parses the options given to a block.\"\"\" opt_dict = { key : self . config . get ( key , None ) for key in OPTS } extra_opts = \"\" for option in re . split ( r \"(?<! \\\\ ) \" , options ): if len ( option ) == 0 : continue try : key , value = option . split ( \"=\" ) except ValueError : extra_opts += \" \" + option continue value = value . replace ( \" \\\\ \" , \"\" ) if key not in opt_dict : extra_opts += \" \" + option continue original = opt_dict [ key ] if isinstance ( original , bool ): value = value . lower () in ( \"1\" , \"true\" , \"yes\" ) elif isinstance ( original , int ): value = int ( value ) elif isinstance ( opt_dict [ key ], list ): value = value . split ( \",\" ) opt_dict [ key ] = value return TermageOptions ( ** opt_dict ), extra_opts # type: ignore replace ( matchobj ) Replaces a code block match with a generated SVG. Source code in termage/mkdocs_plugin.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def replace ( self , matchobj : Match ) -> str : # pylint: disable=too-many-locals \"\"\"Replaces a code block match with a generated SVG.\"\"\" full , indentation , svg_only , options , code = matchobj . groups () indent_len = len ( indentation ) if indentation . endswith ( \" \\\\ \" ): return full . replace ( r \"\\`\" , \"`\" , 1 ) opts , extra_opts = self . parse_options ( options ) set_colors ( opts . foreground , opts . background ) if opts . include is not None : with open ( opts . include , \"r\" , encoding = \"utf-8\" ) as includefile : included = \"\" for line in includefile : if line . startswith ( \"&\" ): included += \"&\" + indentation + line [ 1 :] continue included += indentation + line code = included + code opts . title = opts . title or opts . include code_disp , code_exec = format_codeblock ( code ) with patched_stdout_recorder ( opts . width , opts . height ) as recording : execute ( code = code_exec ) svg = ( recording . export_svg ( title = opts . title , chrome = opts . chrome , prefix = f \"termage- { self . _svg_count } \" , inline_styles = self . config [ \"inline_styles\" ], ) . replace ( \"_\" , r \"\\_\" ) . replace ( \"`\" , r \"\\`\" ) . replace ( \"*\" , r \"\\*\" ) ) self . _svg_count += 1 style = \"margin-top: -1em;\" if not opts . chrome else \"\" if self . config [ \"write_files\" ]: filepath = self . _get_next_path ( opts . title ) with open ( Path ( \"docs\" ) / filepath , \"w\" , encoding = \"utf-8\" ) as export : export . write ( svg ) img_tag = ( f \"<img alt=' { opts . title } ' src='/ { filepath } ' style=' { style } '></img>\" ) if svg_only : return img_tag return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = img_tag , ), amount = indent_len , ) if style != \"\" : svg = svg [: len ( \"<svg \" )] + f \"style=' { style } ' \" + svg [ len ( \"<svg \" ) :] if svg_only : return indent ( svg , indent_len ) return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = svg , ), amount = indent_len , ) indent ( text , amount ) Indents the text by the given amount. Works multiline too! Source code in termage/mkdocs_plugin.py 39 40 41 42 43 44 45 def indent ( text : str , amount : int ) -> str : \"\"\"Indents the text by the given amount. Works multiline too!\"\"\" pad = amount * \" \" return \" \\n \" . join ( pad + line for line in text . splitlines ())","title":"mkdocs_plugin"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermageOptions","text":"Options passed into the Termage plugin. Source code in termage/mkdocs_plugin.py 48 49 50 51 52 53 54 55 56 57 58 59 60 @dataclass class TermageOptions : # pylint: disable=too-many-instance-attributes \"\"\"Options passed into the Termage plugin.\"\"\" title : str width : int height : int include : str foreground : str background : str chrome : bool tabs : tuple [ str , str ] highlight : bool","title":"TermageOptions"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermagePlugin","text":"Bases: BasePlugin An mkdocs plugin for Termage. Source code in termage/mkdocs_plugin.pyclass TermagePlugin ( BasePlugin ): \"\"\"An mkdocs plugin for Termage.\"\"\" config_scheme = ( # File configuration ( \"write_files\" , Type ( bool , default = False )), ( \"inline_styles\" , Type ( bool , default = True )), ( \"path\" , Type ( str , default = \"assets\" )), ( \"name_template\" , Type ( str , default = \"termage_ {count} .svg\" )), # SVG content configuration ( \"background\" , Type ( str , default = \"#212121\" )), ( \"foreground\" , Type ( str , default = \"#dddddd\" )), ( \"tabs\" , Type ( list , default = [ \"Python\" , \"Output\" ])), ( \"chrome\" , Type ( bool , default = True )), ( \"width\" , Type ( int , default = 80 )), ( \"height\" , Type ( int , default = 24 )), ) def __init__ ( self ) -> None : \"\"\"Sets the initial SVG count.\"\"\" self . _svg_count = 0 def _get_next_path ( self , title : str | None ) -> str : \"\"\"Gets the next SVG path.\"\"\" base = self . config [ \"path\" ] name_template = self . config [ \"name_template\" ] name = name_template . format ( count = self . _svg_count , title = str ( title ), ) return f \" { base } / { name } \" def parse_options ( self , options : str ) -> TermageOptions : \"\"\"Parses the options given to a block.\"\"\" opt_dict = { key : self . config . get ( key , None ) for key in OPTS } extra_opts = \"\" for option in re . split ( r \"(?<! \\\\ ) \" , options ): if len ( option ) == 0 : continue try : key , value = option . split ( \"=\" ) except ValueError : extra_opts += \" \" + option continue value = value . replace ( \" \\\\ \" , \"\" ) if key not in opt_dict : extra_opts += \" \" + option continue original = opt_dict [ key ] if isinstance ( original , bool ): value = value . lower () in ( \"1\" , \"true\" , \"yes\" ) elif isinstance ( original , int ): value = int ( value ) elif isinstance ( opt_dict [ key ], list ): value = value . split ( \",\" ) opt_dict [ key ] = value return TermageOptions ( ** opt_dict ), extra_opts # type: ignore def replace ( self , matchobj : Match ) -> str : # pylint: disable=too-many-locals \"\"\"Replaces a code block match with a generated SVG.\"\"\" full , indentation , svg_only , options , code = matchobj . groups () indent_len = len ( indentation ) if indentation . endswith ( \" \\\\ \" ): return full . replace ( r \"\\`\" , \"`\" , 1 ) opts , extra_opts = self . parse_options ( options ) set_colors ( opts . foreground , opts . background ) if opts . include is not None : with open ( opts . include , \"r\" , encoding = \"utf-8\" ) as includefile : included = \"\" for line in includefile : if line . startswith ( \"&\" ): included += \"&\" + indentation + line [ 1 :] continue included += indentation + line code = included + code opts . title = opts . title or opts . include code_disp , code_exec = format_codeblock ( code ) with patched_stdout_recorder ( opts . width , opts . height ) as recording : execute ( code = code_exec ) svg = ( recording . export_svg ( title = opts . title , chrome = opts . chrome , prefix = f \"termage- { self . _svg_count } \" , inline_styles = self . config [ \"inline_styles\" ], ) . replace ( \"_\" , r \"\\_\" ) . replace ( \"`\" , r \"\\`\" ) . replace ( \"*\" , r \"\\*\" ) ) self . _svg_count += 1 style = \"margin-top: -1em;\" if not opts . chrome else \"\" if self . config [ \"write_files\" ]: filepath = self . _get_next_path ( opts . title ) with open ( Path ( \"docs\" ) / filepath , \"w\" , encoding = \"utf-8\" ) as export : export . write ( svg ) img_tag = ( f \"<img alt=' { opts . title } ' src='/ { filepath } ' style=' { style } '></img>\" ) if svg_only : return img_tag return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = img_tag , ), amount = indent_len , ) if style != \"\" : svg = svg [: len ( \"<svg \" )] + f \"style=' { style } ' \" + svg [ len ( \"<svg \" ) :] if svg_only : return indent ( svg , indent_len ) return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = svg , ), amount = indent_len , ) def on_page_markdown ( # pylint: disable=unused-argument self , markdown , page , files , config ) -> str : \"\"\"Replaces the termage markdown syntax.\"\"\" return RE_BLOCK . sub ( self . replace , markdown )","title":"TermagePlugin"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermagePlugin.__init__","text":"Source code in termage/mkdocs_plugin.py 81 82 83 84 def __init__ ( self ) -> None : \"\"\"Sets the initial SVG count.\"\"\" self . _svg_count = 0","title":"__init__()"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermagePlugin.on_page_markdown","text":"Replaces the termage markdown syntax. Source code in termage/mkdocs_plugin.py 222 223 224 225 226 227 def on_page_markdown ( # pylint: disable=unused-argument self , markdown , page , files , config ) -> str : \"\"\"Replaces the termage markdown syntax.\"\"\" return RE_BLOCK . sub ( self . replace , markdown )","title":"on_page_markdown()"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermagePlugin.parse_options","text":"Parses the options given to a block. Source code in termage/mkdocs_plugin.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def parse_options ( self , options : str ) -> TermageOptions : \"\"\"Parses the options given to a block.\"\"\" opt_dict = { key : self . config . get ( key , None ) for key in OPTS } extra_opts = \"\" for option in re . split ( r \"(?<! \\\\ ) \" , options ): if len ( option ) == 0 : continue try : key , value = option . split ( \"=\" ) except ValueError : extra_opts += \" \" + option continue value = value . replace ( \" \\\\ \" , \"\" ) if key not in opt_dict : extra_opts += \" \" + option continue original = opt_dict [ key ] if isinstance ( original , bool ): value = value . lower () in ( \"1\" , \"true\" , \"yes\" ) elif isinstance ( original , int ): value = int ( value ) elif isinstance ( opt_dict [ key ], list ): value = value . split ( \",\" ) opt_dict [ key ] = value return TermageOptions ( ** opt_dict ), extra_opts # type: ignore","title":"parse_options()"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.TermagePlugin.replace","text":"Replaces a code block match with a generated SVG. Source code in termage/mkdocs_plugin.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def replace ( self , matchobj : Match ) -> str : # pylint: disable=too-many-locals \"\"\"Replaces a code block match with a generated SVG.\"\"\" full , indentation , svg_only , options , code = matchobj . groups () indent_len = len ( indentation ) if indentation . endswith ( \" \\\\ \" ): return full . replace ( r \"\\`\" , \"`\" , 1 ) opts , extra_opts = self . parse_options ( options ) set_colors ( opts . foreground , opts . background ) if opts . include is not None : with open ( opts . include , \"r\" , encoding = \"utf-8\" ) as includefile : included = \"\" for line in includefile : if line . startswith ( \"&\" ): included += \"&\" + indentation + line [ 1 :] continue included += indentation + line code = included + code opts . title = opts . title or opts . include code_disp , code_exec = format_codeblock ( code ) with patched_stdout_recorder ( opts . width , opts . height ) as recording : execute ( code = code_exec ) svg = ( recording . export_svg ( title = opts . title , chrome = opts . chrome , prefix = f \"termage- { self . _svg_count } \" , inline_styles = self . config [ \"inline_styles\" ], ) . replace ( \"_\" , r \"\\_\" ) . replace ( \"`\" , r \"\\`\" ) . replace ( \"*\" , r \"\\*\" ) ) self . _svg_count += 1 style = \"margin-top: -1em;\" if not opts . chrome else \"\" if self . config [ \"write_files\" ]: filepath = self . _get_next_path ( opts . title ) with open ( Path ( \"docs\" ) / filepath , \"w\" , encoding = \"utf-8\" ) as export : export . write ( svg ) img_tag = ( f \"<img alt=' { opts . title } ' src='/ { filepath } ' style=' { style } '></img>\" ) if svg_only : return img_tag return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = img_tag , ), amount = indent_len , ) if style != \"\" : svg = svg [: len ( \"<svg \" )] + f \"style=' { style } ' \" + svg [ len ( \"<svg \" ) :] if svg_only : return indent ( svg , indent_len ) return indent ( TAB_TEMPLATE . format ( code_tab = opts . tabs [ 0 ], extra_opts = extra_opts , svg_tab = opts . tabs [ 1 ], code = indent ( code_disp , amount = 4 ), content = svg , ), amount = indent_len , )","title":"replace()"},{"location":"reference/termage/mkdocs_plugin/#termage.mkdocs_plugin.indent","text":"Indents the text by the given amount. Works multiline too! Source code in termage/mkdocs_plugin.py 39 40 41 42 43 44 45 def indent ( text : str , amount : int ) -> str : \"\"\"Indents the text by the given amount. Works multiline too!\"\"\" pad = amount * \" \" return \" \\n \" . join ( pad + line for line in text . splitlines ())","title":"indent()"}]}