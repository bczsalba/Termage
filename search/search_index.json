{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Termage allows you to generate up-to-date, reproducible and real screenshots of Python output while building your documentation. It uses PyTermGUI to create the SVGs, and pre-processes your markdown file into a codefences format. Info Termage requires the following markdown extensions: attr-list pymdown-superfences pymdown-tabbed Python Output from pytermgui import highlight_python code = \"\"\" while True: if condition: print(\"Hello\") else: print(\"Goodbye\") input() \"\"\" print ( highlight_python ( code )) Installation Termage is best installed using pip : $ pip install mkdocs-termage-plugin This installs the plugin, as well as PyTermGUI as a dependency. By this point you probably should already have mkdocs installed. Setup To use the plugin, you should first add it to your mkdocs.yml plugin list: mkdocs.yml plugins : - termage Warning Termage should be loaded before any other markdown pre-processor plugins, to avoid conflicts while formatting. Additionally, you need to make sure some markdown extensions are enabled: mkdocs.yml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true","title":"Introduction"},{"location":"#installation","text":"Termage is best installed using pip : $ pip install mkdocs-termage-plugin This installs the plugin, as well as PyTermGUI as a dependency. By this point you probably should already have mkdocs installed.","title":"Installation"},{"location":"#setup","text":"To use the plugin, you should first add it to your mkdocs.yml plugin list: mkdocs.yml plugins : - termage Warning Termage should be loaded before any other markdown pre-processor plugins, to avoid conflicts while formatting. Additionally, you need to make sure some markdown extensions are enabled: mkdocs.yml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true","title":"Setup"},{"location":"implementation/","text":"Termager works on a very simple basis. It slots in before any markdown processing is done to handle the extra syntax the plugin provides, replace the original text with the newly formatted one and exit. Searching and replacing is done via the re Python module, and the templates which are used for replacing can be seen below. Formatting Templates termage termage-svg","title":"Implementation details"},{"location":"implementation/#formatting-templates","text":"termage termage-svg","title":"Formatting Templates"},{"location":"languages/","text":"In order for Termage to support more languages, PyTermGUI must support two things for each: Executing their code Wrapping the output of their STDOUT The first problem is mostly solved already; there seem to be plenty of ways to execute both interpreted and compiled languages, it just needs to be implemented. The second part, however, is a bit more of a hangup. It is likely very possible to implement, and if there is enough interest in it I might try to do so.","title":"Other languages"},{"location":"options/","text":"The format used by the plugin is the following: ```termage option=value ... {python_code} ``` As all options are read as strings, there are some conversion that are done. Digits are turned into integers, and , delimited strings are turned into tuples. Using spaces Strings may include space chars (\" \") in them, but the spaces must be escaped: Bad Good termage title=My Title termage title=My\\ Title Info Currently, options can only be set on a per-block basis. This is subject to change. Hiding lines By default, all lines within a termage block will be executed and shown in the Python tab. If you want to execute a line, but not have it show up in the source code, you can prepend it using an ampersand ( & ): Python Output # We are using the PTG print function, but that's not visible in the output print ( locals ()) Include Includes a file within the codeblock. The file path's \"origin\" is wherever mkdocs runs from, which is usually the project root. For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ``` Width & height Sets the output terminal's dimensions, in characters. width=50 height=10 width=100 height=20 Note If no dimensions are provided, Termage will use the golden standard (80, 20) dimension tuple. Foreground & background Sets the output terminal's default colors. Foreground will be used for any unstyled text. Background will be used for the titlebar and body of the \"window\". Default foreground=green background=#DDDDDD Note Foreground defaults to #DDDDDD , and background defaults to #212121 . Tabs Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Title Sets the title at the top of the output terminal. Warning If your title includes a space, make sure to escape it! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title","title":"Syntax & options"},{"location":"options/#hiding-lines","text":"By default, all lines within a termage block will be executed and shown in the Python tab. If you want to execute a line, but not have it show up in the source code, you can prepend it using an ampersand ( & ): Python Output # We are using the PTG print function, but that's not visible in the output print ( locals ())","title":"Hiding lines"},{"location":"options/#include","text":"Includes a file within the codeblock. The file path's \"origin\" is wherever mkdocs runs from, which is usually the project root. For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ```","title":"Include"},{"location":"options/#width-height","text":"Sets the output terminal's dimensions, in characters. width=50 height=10 width=100 height=20 Note If no dimensions are provided, Termage will use the golden standard (80, 20) dimension tuple.","title":"Width &amp; height"},{"location":"options/#foreground-background","text":"Sets the output terminal's default colors. Foreground will be used for any unstyled text. Background will be used for the titlebar and body of the \"window\". Default foreground=green background=#DDDDDD Note Foreground defaults to #DDDDDD , and background defaults to #212121 .","title":"Foreground &amp; background"},{"location":"options/#tabs","text":"Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" ))","title":"Tabs"},{"location":"options/#title","text":"Sets the title at the top of the output terminal. Warning If your title includes a space, make sure to escape it! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title","title":"Title"},{"location":"termage_svg/","text":"There are times when you don't need to show the code behind a screenshot. We offer the special declaration termage-svg to return the SVG file without the tabbed layout. All arguments and behaviour is shared between termage and termage-svg , with the exception of the difference in layout.","title":"termage-svg"}]}