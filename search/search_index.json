{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Termage is a wrapper library for PyTermGUI 's SVG export functionalities. Other than providing the module, it also offers a CLI and an MkDocs plugin to put SVGs just about anywhere you can think of. Termage has native support for capturing applications based on PyTermGUI 's WindowManager ! Python Output from pytermgui import tim , ColorPicker from pytermgui.pretty import print tim . print ( \"Welcome to [!gradient(112) bold]Termage[/]! \\n \" ) tim . print ( \"Termage allows you to display [italic]any[/italic] terminal output in a terminal-mimicking [bold]SVG[/bold]!\" ) tim . print ( \" \\n Here are the current locals:\" ) print ( locals ()) Installation Termage is best installed using pip : $ pip install termage This will install PyTermGUI, as well as Termage. The MkDocs plugin is included within the installation as well. Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), )","title":"Introduction"},{"location":"#installation","text":"Termage is best installed using pip : $ pip install termage This will install PyTermGUI, as well as Termage. The MkDocs plugin is included within the installation as well. Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), )","title":"Installation"},{"location":"cli/","text":"The Termage CLI offers a quick and customizable way to export SVGs from your terminal. Usage You simply call termage with some code, and provide options to customize the output. By default, the output file will be printed to STDOUT, but you can export directly to a file using the -o flag. Termage also accepts having code piped to it; this sets the code argument to - , which will cause it to read from STDIN. Showcase source.py import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) Syntax highlighting Code output Code highlighting termage source.py --title=\"Welcome to the Termage CLI!\" termage source.py --title=\"Welcome to the Termage CLI!\" --highlight","title":"In the command line"},{"location":"cli/#usage","text":"You simply call termage with some code, and provide options to customize the output. By default, the output file will be printed to STDOUT, but you can export directly to a file using the -o flag. Termage also accepts having code piped to it; this sets the code argument to - , which will cause it to read from STDIN.","title":"Usage"},{"location":"cli/#showcase","text":"source.py import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), )","title":"Showcase"},{"location":"cli/#syntax-highlighting","text":"Code output Code highlighting termage source.py --title=\"Welcome to the Termage CLI!\" termage source.py --title=\"Welcome to the Termage CLI!\" --highlight","title":"Syntax highlighting"},{"location":"options/","text":"Regardless of your entrypoint, the options available are going to be the same. Include Includes a file within a codeblock. The file path must originate from the same directory as mkdocs.yml . For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ``` Hide lines The plugin has a special bit of syntax to signify Run this line of code, but don't display it . It is denoted by prefacing any hidden line with an ampersand (&): Source ```termage title=Hidden\\ lines &from pytermgui.pretty import print print(locals()) ``` Python Output print ( locals ()) Width and Height Sets the terminal's dimension of the given axis. Must be given an integer, which will be taken as a character-count. width=50 height=10 width=100 height=20 Info If no dimensions are provided, they default to (80, 24). Foreground & Background Modifies the terminal's default colors. foreground is used for all non-styled text, and background is used as both the background to the terminal's contents as well as the window that it emulates. Default foreground=green background=#DDDDDD Info Foreground defaults to #DDDDDD , and background defaults to #212121 . Tabs Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Title Sets the title at the top of the output terminal. Warning When using the plugin, make sure to escape any spaces present in your title! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title","title":"Options"},{"location":"options/#include","text":"Includes a file within a codeblock. The file path must originate from the same directory as mkdocs.yml . For example, let's say we have the following structure: mkdocs.yml docs/ index.md src/ intro01.py intro02.py To include intro01.py into a Termage block within index.md , you could use: ```termage include=docs/src/intro01.py print(\"Code from the original codeblock is retained!\") ``` Info The include option will always \"prefix\" the actual codeblock's value with whatever is included. As such, if docs/src/intro01.py had the content: print ( \"Included text will always preface the real value of a codeblock\" ) Termage will parse the block as: ```termage <options> print(\"Included text will always preface the real value of a codeblock\") print(\"Code from the original codeblock is retained!\") ```","title":"Include"},{"location":"options/#hide-lines","text":"The plugin has a special bit of syntax to signify Run this line of code, but don't display it . It is denoted by prefacing any hidden line with an ampersand (&): Source ```termage title=Hidden\\ lines &from pytermgui.pretty import print print(locals()) ``` Python Output print ( locals ())","title":"Hide lines"},{"location":"options/#width-and-height","text":"Sets the terminal's dimension of the given axis. Must be given an integer, which will be taken as a character-count. width=50 height=10 width=100 height=20 Info If no dimensions are provided, they default to (80, 24).","title":"Width and Height"},{"location":"options/#foreground-background","text":"Modifies the terminal's default colors. foreground is used for all non-styled text, and background is used as both the background to the terminal's contents as well as the window that it emulates. Default foreground=green background=#DDDDDD Info Foreground defaults to #DDDDDD , and background defaults to #212121 .","title":"Foreground &amp; Background"},{"location":"options/#tabs","text":"Sets the text labels of each of the tabs. Accepts two values, delimited by a single , . The first value is used for the Python code, and the second is used for the SVG output. Default tabs=Code,SVG Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" )) Code SVG import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot () manager . add ( ptg . Window ( \"Some window\" , box = \"EMPTY\" ))","title":"Tabs"},{"location":"options/#title","text":"Sets the title at the top of the output terminal. Warning When using the plugin, make sure to escape any spaces present in your title! For example, instead of title=My title , or title=\"My title\" use title=My\\ Title . Default title=My\\ fancy\\ title","title":"Title"},{"location":"plugin/","text":"The termage MkDocs plugin lets you generate your documentation's SVGs every time you build it. This has some advantages: Your screenshots will always remain up to date I know from personal experience how draining it can be to go through all images in your documentaition, see if they need to be replaced, re-create the original screenshot with the right settings & size and upload it to your site. Termage simplifies this by basically doing all of that for you, every time your docs need to be updated. You are always going to test some parts of your function. Some errors, even in well-traversed codepaths may be very hard to catch. By putting your raw output straight into your documentation, you ensure that as many people see it as possible. This hugely increases the chance of finding issues that no one would have reported for weeks. You have a good opportunity to write some visual example code! The easiest way to work with the plugin is to keep a set of source code files, and use the include option to display them on the page. By doing so, you offer some really good \"getting started\" material to newcomers to your project, and ensure that it is fully functional! Set up In order to use the plugin, you need to enable the following built-in markdown extensions: mkdocs.yaml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Additionally, you must also activate the plugin: mkdocs.yaml plugins : - termage : # Default config options name_template : \"termage_{count}.svg\" path : \"assets\" name_template : \"termage_{count}.svg\" background : \"#212121\" foreground : \"#dddddd\" tabs : [ \"Python\" , \"Output\" ] chrome : True width : 0 height : 4 Warning Make sure to put this plugin in front of any other markdown pre-processors. This helps cut down on unintended, and hard to debug behaviour. Usage The plugin will look for the syntax: ```termage(-svg) option=value option=value... {code} ``` All possible options can be found on their page . There are 2 directives possible: termage <options> : Generates a tabbed layout, with one tab for the Python source, and the other for the SVG output. Example ```termage title=Tabbed\\ layout include=docs/src/source.py ``` Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) termage-svg <options> : Generates only the output SVG, without the tabbed layout. Example ```termage-svg title=Tabbed\\ layout include=docs/src/source.py ```","title":"As an MkDocs plugin"},{"location":"plugin/#set-up","text":"In order to use the plugin, you need to enable the following built-in markdown extensions: mkdocs.yaml markdown_extensions : - attr_list - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Additionally, you must also activate the plugin: mkdocs.yaml plugins : - termage : # Default config options name_template : \"termage_{count}.svg\" path : \"assets\" name_template : \"termage_{count}.svg\" background : \"#212121\" foreground : \"#dddddd\" tabs : [ \"Python\" , \"Output\" ] chrome : True width : 0 height : 4 Warning Make sure to put this plugin in front of any other markdown pre-processors. This helps cut down on unintended, and hard to debug behaviour.","title":"Set up"},{"location":"plugin/#usage","text":"The plugin will look for the syntax: ```termage(-svg) option=value option=value... {code} ``` All possible options can be found on their page . There are 2 directives possible: termage <options> : Generates a tabbed layout, with one tab for the Python source, and the other for the SVG output. Example ```termage title=Tabbed\\ layout include=docs/src/source.py ``` Python Output import pytermgui as ptg with ptg . WindowManager () as manager : manager . layout . add_slot ( \"Body\" ) manager . add ( ptg . Window ( ptg . inspect ( ptg . inspect ), box = \"EMPTY\" , ), ) termage-svg <options> : Generates only the output SVG, without the tabbed layout. Example ```termage-svg title=Tabbed\\ layout include=docs/src/source.py ```","title":"Usage"}]}